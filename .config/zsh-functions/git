#---GIT AUTOMOATION-------------------------------------------------------
# vim: nospell syntax=zsh


function _z_git_config()
{
	REPOS_DIR="$HOME/src"
}

g()
{
	_z_git_config

	local REPO="$1"
	local NAME="${REPO#*:}"
	local FOLDER="${REPOS_DIR}/${NAME}"

	if [ -e "$FOLDER" ]
	then
		cd "$FOLDER"
		return 0
	fi

	if [ "$REPO" = "${REPO#*:}" ]
	then
		if [ "${REPO%%/*}" = "gocomparegroup" ] || [ "${REPO%%/*}" = "javajawa" ]
		then
			REPO="git@github.com:${REPO%.git}.git"
		else
			REPO="git@gitlab.futurenet.com:${REPO%.git}.git"
		fi
	fi

	command git clone "$REPO" "$FOLDER" && cd "$FOLDER"
}

mr()
{
	local BRANCH=$(command git rev-parse --abbrev-ref HEAD)

	if [ $? -ne 0 ]
	then
		printf >&2 "Unable to determine a current branch. Is this really a git repo?\n"
		return $?
	fi

	local REMOTE=$(command git config --get "branch.${BRANCH}.remote")
	REMOTE=${REMOTE:-origin}

	local UPSTREAM=$(command git config --get "branch.${BRANCH}.merge")
	UPSTREAM=${UPSTREAM#refs/heads/}

	local DEFAULT_BRANCH=$(command git rev-parse --abbrev-ref "refs/remotes/$REMOTE/HEAD")
	DEFAULT_BRANCH=${DEFAULT_BRANCH#$REMOTE/}
	DEFUALT_BRANCH=${DEFAULT_BRANCH:-master}

	if [ "$BRANCH" = "$DEFAULT_BRANCH" ] || [ "$UPSTREAM" = "$DEFAULT_BRANCH" ]
	then
		printf "Enter new branch name: "
		read -r BRANCH

		git checkout -b "$BRANCH"
		unset UPSTREAM
	fi

	if [ -n "$UPSTREAM" ]
	then
		command git push "$REMOTE" "${BRANCH}" -o merge_request.create -o "merge_request.target=${DEFAULT_BRANCH}" --no-verify
	else
		command git push "$REMOTE" "${BRANCH}:${BRANCH}" -u -o merge_request.create -o "merge_request.target=${DEFAULT_BRANCH}" --no-verify
	fi
}

git_update()
{
	local BRANCH=$(command git branch --show-current)

	if [ $? -ne 0 ]
	then
		X=$?
		printf >&2 "Unable to determine a currnt branch. Is this really a git repo?\n"
		return $X
	fi

	if [ -n "$(command git status --porcelain)" ]
	then
		printf >&2 "Local changes detected, aborting\n"
		return 1
	fi

	local REMOTE=$(command git config --get "branch.${BRANCH}.remote")
	REMOTE=${REMOTE:-origin}

	local DEFAULT_BRANCH=$(command git rev-parse --abbrev-ref "refs/remotes/$REMOTE/HEAD")
	DEFAULT_BRANCH=${DEFAULT_BRANCH#$REMOTE/}
	DEFUALT_BRANCH=${DEFAULT_BRANCH:-master}

	command git fetch --prune "$REMOTE" && \
	git checkout "$DEFAULT_BRANCH" && \
	command git merge "$REMOTE/HEAD" --ff-only || return 1

	local SELF=$(command git rev-parse --symbolic-full-name HEAD)

	command git branch --format '%(refname)' --merged=HEAD | while read REF
	do
		if [ "$REF" != "$SELF" ]
		then
			command git branch -d "${REF#refs/heads/}"
		fi
	done
}

get_gitlab_repos()
{
	_z_git_config

	test -r ~/.config/gitlab-token && source ~/.config/gitlab-token

	if [ -z "$GITLAB_TOKEN" ]
	then
		printf >&2 "GITLAB_TOKEN not set\n"
		return 1
	fi

	typeset -aU ALL_REPOS=()
	PAGE=0

	while true
	do
		PAGE=$(( $PAGE + 1 ))

		REPOS=("${(@f)$(curl -sS "https://gitlab.futurenet.com/api/v4/projects?archived=0&membership=1&per_page=100&page=${PAGE}&private_token=$GITLAB_TOKEN" | jq --raw-output '.[].path_with_namespace')}")
		ALL_REPOS+=($REPOS)

		if [ "${#REPOS}" -lt 100 ]
		then
			break
		fi
	done

	printf >"$HOME/.zshcache/gitlab-repos" "%s" "$ALL_REPOS"
	printf >&2 "Cached ${#ALL_REPOS} repos\n"
}

_g()
{
	_arguments '1: :->repo'
	_z_git_config

	if [ "$state" = "repo" ]
	then
		typeset -aU ALL_REPOS

		LOCAL_REPOS=("${(@f)$(find "$REPOS_DIR" -maxdepth 3 -type d -name .git -print | sed -e "s@$REPOS_DIR/@@" -e 's@/.git@@')}")
		REMOTE_REPOS=($(cat "$HOME/.zshcache/gitlab-repos"))

		ALL_REPOS+=($LOCAL_REPOS)
		ALL_REPOS+=($REMOTE_REPOS)

		compadd "$@" $ALL_REPOS
	fi
}

compdef _g g


git_prompt()
{
	readonly local CURR_DIR="$(pwd)/"

	if [ -n "$CURRENT_GIT_DIR" ]
	then
		test "${CURR_DIR#$CURRENT_GIT_DIR}" != "${CURR_DIR}" && return 0

		printf >&2 "[Leaving git repo %s]\n" "$CURRENT_GIT_DIR"

		unset "PROMPT_INFO[git]"
		set_prompt
	fi

	DIR=$(git rev-parse --show-toplevel 2>/dev/null)

	if [ -n "$DIR" ] && [ "$DIR" != "$HOME" ]
	then
		printf >&2 "[Entering git repo %s]\n" "$DIR"

		CURRENT_GIT_DIR=$DIR
		PROMPT_INFO[git]=$(command git rev-parse --abbrev-ref HEAD)
		set_prompt
	fi
}

git()
{
	command git "$@"
	if [ -n "$CURRENT_GIT_DIR" ]
	then
		PROMPT_INFO[git]=$(command git rev-parse --abbrev-ref HEAD)
		set_prompt
	fi
}

add-zsh-hook chpwd git_prompt
CURRENT_GIT_DIR=
git_prompt
