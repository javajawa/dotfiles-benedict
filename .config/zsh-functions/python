#---PYTHON AUTOMATION-----------------------------------------------------
# vim: syntax=zsh

activate_venv()
{
	readonly local CURR_DIR="$(pwd)/"

	if [ -n "$VIRTUAL_ENV" ]
	then
		readonly BASE_DIR=${VIRTUAL_ENV%venv}

		if [ "${CURR_DIR#$BASE_DIR}" != "${CURR_DIR}" ]
		then
			return 0
		fi

		printf >&2 "[Leaving venv %s]\n" "$VIRTUAL_ENV"

		unset VENV_NAME
		unset VIRTUAL_ENV
		unset PYTHON_PATH

		export PATH=$DEFAULT_PATH

		unset "PROMPT_INFO[venv]"

		set_prompt
	fi

	if [ -d "${CURR_DIR}venv" ]
	then
		printf >&2 "[Entering venv %s]\n" "${CURR_DIR}venv"

		export VIRTUAL_ENV="${CURR_DIR}venv"
		export PATH="${CURR_DIR}venv/bin:$DEFAULT_PATH"
		export PROMPT_INFO[venv]="$(basename ${CURR_DIR})"

		if [ -d "${CURR_DIR}src" ]
		then
			export PYTHONPATH="${CURR_DIR}src"
		fi

		set_prompt
	fi
}

add-zsh-hook chpwd activate_venv
VIRTUAL_ENV=
activate_venv

python()
{
	_auto_venv
	command python3 "$@"
}

pip()
{
	_auto_venv
	command pip "$@"
}

_auto_venv()
{
	test -n "$VIRTUAL_ENV" && return 0

	local readonly GITDIR=$(command git rev-parse --show-toplevel 2>/dev/null)

	test -z "$GITDIR" && return 0

	printf >&2 "Create venv in %s? [Yn]" "$GITDIR/venv"
	read -r CREATE

	test "$CREATE" = "n" || test "$CREATE" = "N" || test "$CREATE" = "no"

	if [ $? -ne 0 ]
	then
		command python3 -m venv "$GITDIR/venv"
		activate_venv
	fi
}

alias python3=python
